%% 2a)  Create two different confidence intervals for each months
clear all; close all; load powercurve_V112
lambda = [9.7, 9.2, 8, 7.8, 8.1, 9.1, 9.9, 10.6]
k = [2, 2, 1.9, 1.9, 1.9, 2, 1.9, 2]
N = 10000;
kvantil = norminv(1 - 0.05/2)
%%
% Creates confidence interval for produced power for each month
% using crude Monte Carlo method
for i = 1:length(k)
    sample = wblrnd(lambda(i),k(i),N,1); % the random samples
    tn(i) = mean(P(sample)) % expected value estimated from our random samples
    s(i) = std(P(sample)) % standard deviation estimated from our random samples
    % confidence intervalls for all months
    CI_1(i, :) = [tn(i) - s(i)/sqrt(N) * kvantil, tn(i) + s(i)/sqrt(N) *kvantil] 
end

% Creates confidence interval for produced value P(v) using samples generated by
% f(v) conditioned on the interval I = (3,25)

% generate random numbers from a conditioned, truncated distributions
% and create a CI for each month

for i = 1:length(k)
    A(i) = wblcdf(3,lambda(i), k(i)); % F(a)
    B(i) = wblcdf(25,lambda(i), k(i)); % F(b)
    Fhat_inv = @(u) wblinv(u*(B(i) - A(i)) + A(i), lambda(i), k(i));
    f_sample = inverseMethod(Fhat_inv, N); % f_sample is from conditioned 
    % distribution. Now we have x from the correct interval but need to
    % compensate the probability in order to actually consider the correct
    % distribution of wind speeds.
    temp = (B(i)-A(i))*P(f_sample);
    tn_tr(i) = mean(temp); % new mean
    s_tr(i) = std(temp); % new standard deviation
    CI_tr(i,:) = [tn_tr(i) - kvantil*s_tr(i)/sqrt(N) , tn_tr(i) + kvantil* s_tr(i)/sqrt(N)]; %
end

%% Comparing methods plot
% comparing the two different methods vs numbers of samples for march
% (m = 2)
%%
m = 2;
N = 1e4;
sample = wblrnd(lambda(m),k(m),N,1);
Fhat_inv = @(u) wblinv(u*(B(m) - A(m)) + A(m), lambda(m), k(m));
f_sample = inverseMethod(Fhat_inv, N);
kvantil = norminv(0.975);
Imin = zeros(N,1);
Imax = zeros(N,1);
Imin_tr = zeros(N,1);
Imax_tr = zeros(N, 1);
tt = zeros(N, 1);
ttr = zeros(N, 1);
%%
for i = 1:N
    trunc = P(f_sample(1:i))*(B(m) - A(m));
    ttr(i) = mean(trunc);
    str = std(trunc)/sqrt(i);
    tt(i) = mean(P(sample(1:i)));
    s(i) = std(P(sample(1:i)))/sqrt(i);
    Imin(i) = tt(i) - kvantil*s(i);
    Imax(i) = tt(i) + kvantil*s(i);
    Imin_tr(i) = ttr(i) - kvantil*str;
    Imax_tr(i) = ttr(i) + kvantil*str;
end
%%
figure(1)
hold on
plot(1:N,Imin,'r--');
hold on
plot(1:N,Imax,'r--');
hold on
plot(1:N,tt,'b');
hold on
plot(1:N,Imin_tr,'g--');
hold on
plot(1:N,Imax_tr,'g--');
hold on
plot(1:N, ttr, 'k');
hold on


%% histogram plots of f(v) and f(v) conditioned on I = (3, 25). 
figure(5) 
subplot(1,2,1)
hist(sample, 100)
title('Histogram samples from f(v), december')
subplot(1,2,2)
hist(f_sample, 100)
title('Histogram samples from f(v) conditioned on the interval I = (3,25) for december')