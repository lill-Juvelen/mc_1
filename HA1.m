%% 2a)  Create two different confidence intervals for each months
clear all; close all; load powercurve_V112
lambda = [9.7, 9.2, 8, 7.8, 8.1, 9.1, 9.9, 10.6]
k = [2, 2, 1.9, 1.9, 1.9, 2, 1.9, 2]
N = 100000;
kvantil = norminv(1 - 0.05/2)
%%
% Creates confidence interval for produced power for each month
% using crude Monte Carlo method
for i = 1:length(k)
    sample = wblrnd(lambda(i),k(i),N,1); % the random samples
    tn(i) = mean(P(sample)) % expected value estimated from our random samples
    s(i) = std(P(sample)) % standard deviation estimated from our random samples
    % confidence intervalls for all months
    CI_1(i, :) = [tn(i) - s(i)/sqrt(N) * kvantil, tn(i) + s(i)/sqrt(N) *kvantil] 
end

%% Truncated (rejection sampling?)
% Creates confidence interval for produced value P(v) using samples generated by
% f(v) conditioned on the interval I = (3,25)

% generate random numbers from a conditioned, truncated distributions
% and create a CI for each month

for i = 1:length(k)
    A(i) = wblcdf(3,lambda(i), k(i)); % F(a)
    B(i) = wblcdf(25,lambda(i), k(i)); % F(b)
    Fhat_inv = @(u) wblinv(u*(B(i) - A(i)) + A(i), lambda(i), k(i));
    f_sample = inverseMethod(Fhat_inv, N); % f_sample is from conditioned 
    % distribution. Now we have x from the correct interval but need to
    % compensate the probability in order to actually consider the correct
    % distribution of wind speeds.
    temp = (B(i)-A(i))*P(f_sample);
    tn_tr(i) = mean(temp); % new mean
    s_tr(i) = std(temp); % new standard deviation
    CI_tr(i,:) = [tn_tr(i) - kvantil*s_tr(i)/sqrt(N) , tn_tr(i) + kvantil* s_tr(i)/sqrt(N)]; %
end

%% Comparing crude and truncated methods plot
% comparing the two different methods vs numbers of samples for march
% (m = 2)
m = 2;
N = 1.1e4;
tic;
sample = wblrnd(lambda(m),k(m),N,1);
Fhat_inv = @(u) wblinv(u*(B(m) - A(m)) + A(m), lambda(m), k(m));
f_sample = inverseMethod(Fhat_inv, N);
kvantil = norminv(0.975);
Imin = zeros(N,1);
Imax = zeros(N,1);
Imin_tr = zeros(N,1);
Imax_tr = zeros(N, 1);
tt = zeros(N, 1);
ttr = zeros(N, 1);

tic;
for i = 1:N
    trunc = P(f_sample(1:i))*(B(m) - A(m));
    ttr(i) = mean(trunc);
    str = std(trunc)/sqrt(i);
    tt(i) = mean(P(sample(1:i)));
    s(i) = std(P(sample(1:i)))/sqrt(i);
    Imin(i) = tt(i) - kvantil*s(i);
    Imax(i) = tt(i) + kvantil*s(i);
    Imin_tr(i) = ttr(i) - kvantil*str;
    Imax_tr(i) = ttr(i) + kvantil*str;
end
toc;
%%
tic;
figure(6)
hold on
%plot(1:N,Imin,'r--');
hold on
%plot(1:N,Imax,'r--');
hold on
plot(1:N,tt,'b');
hold on
%plot(1:N,Imin_is,'y--');
hold on
%plot(1:N,Imax_is,'y--');
plot(1:N, ttr, 'k');
hold on
plot(1:N, tau, 'm');
hold on
%plot(1:N,Imin_tr,'g--');
hold on
%plot(1:N,Imax_tr,'g--');
hold on


axis([0 N 1e6 2e6]);
title('Comparing methods')
xlabel('Number of samples')
ylabel('Expected value of power output')
legend('Crude Monte Carlo', 'Truncated', 'Important sampling')
toc;

%% 2b importance sampling
close all
N=1000;
v = linspace(3,25,N);
instgam = gampdf(v,3.1,2.5); % used for plots in document

for  i = 1:length(k)
f(i,:) = wblpdf(v,lambda(i),k(i));
r(i,:) = P(v)'.*(f(i,:)./instgam); % compute the ratio p(v)*(f(v))/g(v)
end

hold on
cmap = colormap(hsv(24));
c = 1;
for  i = 1:length(k)
plot(v,f(i,:), 'LineWidth', 2,'Color', cmap(c, :))
hold on
c = c +3;
end
plot(v,instgam,'Linewidth', 2, 'Color', 'k')
legend('jan & feb', 'march', 'april', 'may', 'june & july & aug', 'sept', 'okt', 'nov & dec', 'g(v)')
title('Probability density functions for each month with instrumental density g (in black)')
xlabel('Windspeed (m/s)')
ylabel('Probability')
%% 
title('The different f_{i}(v) and our chosen instrumental density (*)')
xlabel('Wind speed (m/s)')
legend('jan & feb', 'march', 'april', 'may', 'june & july & aug', 'sept', 'oct', 'nov & dec', 'g(v)')

figure(3)
v = linspace(3,25,N);
cmap = colormap(hsv(24));
c = 1;
for i =1:length(k)
    plot(v, r(i,:), 'Linewidth', 2, 'Color', cmap(c,:))
    hold on
    c = c +3;
end
title('Plot of ratio P(v)f_i(v)/g(v)')
xlabel('Wind speed (m/s)')
legend('feb', 'march', 'april', 'may & july', 'june & aug', 'sept', 'oct', 'nov & dec & jan')

%% One CI
N = 1.1e4;
alpha = 7.9 % dessa värden som parametrar i gamma ger en lägre varians. 
beta = 1.5
is_samples = gamrnd(alpha, beta, N, 1);
Imin = [];
Imax = [];
omega = wblpdf(is_samples, lambda(2), k(2))./gampdf(is_samples, alpha, beta);
temp = P(is_samples) .* omega;
tau = mean(temp)
s = std(temp)

%% comparing method ( many CI's) important sampling plot
for i = 1:N
    omega = wblpdf(is_samples(1:i), lambda(2), k(2))./ ...
        gampdf(is_samples(1:i), alpha, beta);
    temp = P(is_samples(1:i)) .* omega;
    tau(i) = mean(temp);
    s = std(temp);
    Imin_is(i) = tau(i) - kvantil*s/sqrt(N);
    Imax_is(i) = tau(i) + kvantil*s/sqrt(N);
end

% plot CI for different number of samples
cmap = colormap(hsv());
plot(1:N,Imin_tr,'y--');
hold on
plot(1:N,Imax_tr,'y--');
hold on
plot(1:N, ttr, 'm');
hold on
axis([0 N 1e6 2e6]);
toc;




