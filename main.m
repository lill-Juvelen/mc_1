%% 2a) Create confidence interval using samples from f(v)
clear all
close all
load powercurve_V112
lambda = 9.2
k = 1.7
N = 10000;
rng(56)
sample = wblrnd(lambda,k,N,1); % the random samples
tn = mean(P(sample)) % expected value estimated from our random samples
s = std(P(sample)) % standard deviation estimated from our random samples

% create confidence interval for produced power. 
kvantil = norminv(1 - 0.05/2)
CI_first = [tn - s/sqrt(N) * kvantil, tn + s/sqrt(N) *kvantil] % confidence
% interval = 1.0e+06 * [1.4129    1.4616]


%% 2a) Create confidence interval for P(v) using samples generated by
% f(v) conditioned on the interval I = (3,25)

A = wblcdf(3,lambda, k) %
B = wblcdf(25,lambda, k) % F(b)
Fhat_inv = @(u) wblinv(u*(B - A) + A, lambda, k) % inverse cdf of 
% conditioned distribution. 
f_sample = inverseMethod(Fhat_inv, 10000); % generate random numbers from 
% our conditioned ditribution, using the inverse method. 

% histogram plots
figure(3) 
subplot(1,2,1)
hist(sample, 1000)
title('Histogram samples from f(v)')
subplot(1,2,2)
hist(f_sample, 1000)
title('Histogram samples from f(v) conditioned on the interval I = (3,25)')

tn_tr = mean(P(f_sample))  % new mean
s_tr = std(P(f_sample))     % new standard deviation

CI_tr = [tn_tr - kvantil*s_tr/sqrt(N) , tn_tr + kvantil* s_tr/sqrt(N)] %
% confidence interval for P(v)
% = 1.0e+06 * [1.6343    1.6808]

%% 2b) Create confidence interval using random samples generated by
%      importance sampling
close all
u1 = linspace(3,25,100)
u2 = linspace(0,27,100) 

% tuning parameters
a = 2.99
b = 3
c = 0.2

pdf1 = @(x) wblpdf(x, lambda, k) % our truncated pdf
pdf2 = @(x,a,b,c) gampdf(x+c, a, b) % our instrumental pdf

figure(8)
hold on
plot(u1, pdf1(u1))
plot(u2, pdf2(u2,a,b,c))

figure(10)
ratio = pdf1(u1)./pdf2(u1,a,b,c)
plot(u1,ratio)
title('Ratio f(x)/g(x)')

max(ratio)
%% hmm
close all
h = 0.1; x = 0:h:27;
fun = @(par) norm(diff(pdf1(x)./(gampdf(x, par(1), par(2))./gamcdf(x, par(1), par(2)))));

pars = fminsearch(fun, [3,4])

g = @(x) gampdf(x, pars(1), pars(2))./gamcdf(x, pars(1), pars(2))

figure(1)
plot(u2, g(u2))

figure(8)
hold on
plot(u1, pdf1(u1))
plot(u1, g(u1))

hold off
figure(9)
ratio = pdf1(u1)./g(u1)
plot(u1,ratio)
title('Ratio f(x)/g(x)')
