%% 2a) Create confidence interval using samples from f(v)
clear all
close all
load powercurve_V112
rng(56)

lambda = [10.6, 9.7, 9.2, 8, 7.8, 8.1, 7.8, 8.1, 9.1, 9.9, 10.6, 10.6]
k = [2, 2, 2, 1.9, 1.9, 1.9, 1.9, 1.9, 2, 1.9, 2, 2]
N = 100000;
kvantil = norminv(1 - 0.05/2)

% create confidence interval for produced power for each month
for i = 1:length(k)
    sample = wblrnd(lambda(i),k(i),N,1); % the random samples
    tn(i) = mean(P(sample)) % expected value estimated from our random samples
    s(i) = std(P(sample)) % standard deviation estimated from our random samples
    CI_1(i, :) = [tn(i) - s(i)/sqrt(N) * kvantil, tn(i) + s(i)/sqrt(N) *kvantil] % confidence
end

%% 2a) Create confidence interval for P(v) using samples generated by
% f(v) conditioned on the interval I = (3,25)

% generate random numbers from our conditioned, truncated distributions
% and creates a CI for each month

for i = 1:length(k)
    A(i) = wblcdf(3,lambda(i), k(i)); % F(a)
    B(i) = wblcdf(25,lambda(i), k(i)); % F(b)
    Fhat_inv = @(u) wblinv(u*(B - A) + A, lambda(i), k(i));
    f_sample = inverseMethod(Fhat_inv, N);
    tn_tr = mean(P(f_sample)); % new mean
    s_tr = std(P(f_sample)); % new standard deviation
    CI_tr(i,:) = [tn_tr - kvantil*s_tr/sqrt(N) , tn_tr + kvantil* s_tr/sqrt(N)]; %
end

%%
figure(5) 
subplot(1,2,1)
hist(sample, 1000)
title('Histogram samples from f(v), december')
subplot(1,2,2)
hist(f_sample, 1000)
title('Histogram samples from f(v) conditioned on the interval I = (3,25),  december')
%% 2b) Create confidence interval using random samples generated by
%      importance sampling
close all
u1 = linspace(3,25,1000)
u2 = linspace(0,27,100) 

% tuning parameters
a = 8 % 2.99, b = 2 passar för f(x). a = 8, b = 1.6 passar phi(x) * f(x). 
b = 1.6  % 2.7, b = 3.2 bra åas
c = 0

pdf1 = @(x) wblpdf(x, lambda, k) % our truncated pdf
pdf2 = @(x,a,b,c) gampdf(x+c, a, b) % our instrumental pdf


figure(8)
hold on
plot(u1, 0.5e-6*P(u1).*pdf1(u1)')
plot(u1, pdf1(u1)')
plot(u2, pdf2(u2,a,b,c))
%%
figure(10)
ratio2 = pdf1(u1)./pdf2(u1,a,b,c);
ratio1 = (P(u1).*((pdf1(u1)'./pdf2(u1,a,b,c)'))) % we want this ratio to be as constant as
% possible
subplot(1,2,1)
plot(u1,ratio1)
title('Ratio \phi(x)*(f(x)/g(x))')
subplot(1,2,2)
plot(u1,ratio2);
title('Ratio (f(x)/g(x))')
%% importance sampling
omega = @(x) pdf1(x) ./ pdf2(x, a, b,c)
sample = gamrnd(a,b, 10000,1); % generade sample from our chosen distribution g
tn_IS = mean(P(sample).*omega(sample)) % mean of phi(x)*w(x)
s_IS = std(P(sample).*omega(sample))  % mindre än de tidigare, men osäker på 
% om jag gjort rätt

CI_IS = [tn_IS - kvantil*s_IS/sqrt(N) , tn_IS + kvantil* s_IS/sqrt(N)] %


%% hmm
close all
h = 0.1; x = 0:h:27;
%fun = @(par) norm(diff((P(u1).*(pdf1(u1)'./(gampdf(x, par(1), par(2))./gamcdf(x, par(1), par(2))))/h);

% vill vi att relative skillnad ska vara i ordning 10^6 eller nära 1?

%pars = fminsearch(fun, [1e2,3,4])

%g = @(x) gampdf(x, pars(1), pars(2)) ./ gamcdf(x, pars(1), pars(2))
%%
figure(1)
plot(u2, g(u2))

figure(8)
hold on
plot(u1, P(u1).*pdf1(u1)')
plot(u1, g(u1))

hold off
figure(9)
ratio = pdf1(u1)./g(u1)
plot(u1,ratio)
title('Ratio f(x)/g(x)')
